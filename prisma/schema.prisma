// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider      = "mysql"
    relationMode  = "prisma"
    url           = env("DATABASE_URL")
}

// When using the MySQL connector for Prisma, the Prisma String type gets mapped to varchar(191) 
// which may not be long enough to store fields such as id_token in the Account model. This can be 
// avoided by explicitly using the Text type with @db.Text.
// https://authjs.dev/reference/adapter/prisma

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Employee {
  id    			Int     			@default(autoincrement()) @id
  name  			String
  is_active 	Boolean 			@default(true)
  committees 	Membership[]
}

model Committee {
  id    						    Int                 @default(autoincrement()) @id
  bond  						    String              //Vínculo 
  name  						    String              //Órgão
  begin_date 				    DateTime
  end_date 					    DateTime
  ordinance 				    String?             //Portaria 
  observations 			    String?
  is_active 				    Boolean             @default(true)
  members 					    Membership[]
  template 	  Template?  @relation(fields: [template_id], references: [id])
  template_id Int?                // relation scalar field (used in the `@relation` attribute above) @map("template_id")
  
  @@index([template_id])
}

model Membership {
  id           Int         @default(autoincrement()) @id
  employee 		 Employee 	  @relation(fields: [employee_id], references: [id])
  employee_id  Int 			// relation scalar field (used in the `@relation` attribute above) @map("employee_id")
  committee 	 Committee 	@relation(fields: [committee_id], references: [id])
  committee_id Int 			  // relation scalar field (used in the `@relation` attribute above)
  role         String   	@default("Membro(a)") //Cargo
  ordinance    String?             //Portaria 
  begin_date   DateTime 	// default: begin_date da comissão
  end_date     DateTime
  is_active    Boolean   	@default(true)
  observations String?

  @@index([employee_id])
  @@index([committee_id])
}

model Notification {
  id    			Int       @id @default(autoincrement())
  isOn        Boolean   @default(false)
  lastSentOn  DateTime?  
  template 	  Template  @relation(fields: [template_id], references: [id], onDelete: Cascade)
  template_id Int       @unique
}
model Template {
  id    			    Int      @id @default(autoincrement())
  name            String              
  committees 	    Committee[]
  notification    Notification?
}

