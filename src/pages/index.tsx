import {
  signIn,
  signOut,
  useSession,
} from 'next-auth/react';
import Head from 'next/head';
import Link from 'next/link';
import { ReactElement } from 'react';
import { api } from '~/utils/api';

export default function Home() {
  const hello = api.example.hello.useQuery({
    text: 'from tRPC',
  });

  const { status } = useSession();

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta
          name="description"
          content="Generated by create-t3-app"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Create{' '}
            <span className="text-[hsl(280,100%,70%)]">
              T3
            </span>{' '}
            App
          </h1>
          <div className="flex flex-col items-center gap-2">
            <p className="text-2xl text-white">
              {hello.data
                ? hello.data.greeting
                : 'Loading tRPC query...'}
            </p>
            <div className="flex flex-col items-center justify-center gap-4">
              {status === 'loading' ? (
                <h3> Loading... please wait</h3>
              ) : (
                <AuthShowcase />
              )}
            </div>
          </div>
        </div>
      </main>
    </>
  );
}

function AuthShowcase() {
  const { data: sessionData, status } = useSession();

  const { data: secretMessage } =
    api.example.getSecretMessage.useQuery(
      undefined, // no input
      { enabled: sessionData?.user !== undefined },
    );

  return (
    <>
      <p className="text-center text-2xl text-white">
        {sessionData && (
          <span>Logged in as {sessionData.user?.name}</span>
        )}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      {status === 'authenticated' ? (
        <div>
          {sessionData.user && sessionData.user.image && (
            <>
              <h3> hi {sessionData.user.name}</h3>
              <img
                src={sessionData.user.image}
                alt={sessionData.user.name + ' photo'}
              />
            </>
          )}
          <button
            className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
            onClick={() => void signOut()}
          >
            Sign out
          </button>
        </div>
      ) : (
        <button
          className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
          onClick={() => void signIn()}
        >
          Sign in
        </button>
      )}
    </>
  );
}
